{"version":3,"sources":["types/TodosType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodosType","TodoList","todos","onCloseButton","todoToShow","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","option","onTodoTypeChange","filter","handleFilterChange","handleFilterClear","value","onChange","event","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","fetchUser","a","fetchedUser","console","log","useEffect","href","email","name","App","typeOfTodos","setTypeOfTodos","setFilter","setTodoToShow","setTodos","fetchTodos","todosFromServer","groupedTodos","useMemo","filteredTodos","normalizedFilter","toLowerCase","includes","query","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.679198c4.chunk.js","sourcesContent":["export enum TodosType{\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  onCloseButton: (todo: Todo | null) => void\n  todoToShow: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onCloseButton,\n  todoToShow,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {\n        todos.map((todo) => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className=\"has-background-info-light\"\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {\n                  completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )\n                }\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-danger': !completed,\n                    'has-text-success': completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onCloseButton(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={\n                        classNames({\n                          'far fa-eye': todoToShow?.id !== id,\n                          'far fa-eye-slash': todoToShow?.id === id,\n                        })\n                      }\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })\n      }\n    </tbody>\n  </table>\n);\n","import React, { ChangeEvent } from 'react';\nimport { TodosType } from '../../types/TodosType';\n\ntype Props = {\n  option: string,\n  onTodoTypeChange: (t: string) => void,\n  filter: string,\n  handleFilterChange: (t: string) => void,\n  handleFilterClear: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  option,\n  onTodoTypeChange,\n  filter,\n  handleFilterChange,\n  handleFilterClear,\n}) => {\n  const onFilterChange = (event: ChangeEvent<HTMLInputElement>) => {\n    handleFilterChange(event.target.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={option}\n            onChange={(event) => onTodoTypeChange(event.target.value)}\n          >\n            <option value={TodosType.ALL}>All</option>\n            <option value={TodosType.ACTIVE}>Active</option>\n            <option value={TodosType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter}\n          onChange={onFilterChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {\n          filter && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleFilterClear}\n              />\n            </span>\n          )\n        }\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React,\n{\n  useEffect,\n  useState,\n} from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo,\n  onCloseButton: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onCloseButton }) => {\n  const {\n    userId,\n    title,\n    id,\n    completed,\n  } = todo;\n\n  const [user, setUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchUser = async () => {\n    try {\n      setIsLoading(true);\n      const fetchedUser = await getUser(userId);\n\n      setUser(fetchedUser);\n    } catch {\n      // eslint-disable-next-line\n      console.log('Error occurred in Modal fetch')\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onCloseButton(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user && user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodosType } from './types/TodosType';\n\nexport const App: React.FC = () => {\n  const [typeOfTodos, setTypeOfTodos] = useState<string>('all');\n  const [filter, setFilter] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [todoToShow, setTodoToShow] = useState<Todo | null>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const onTodoTypeChange = (type: string) => {\n    setTypeOfTodos(type);\n  };\n\n  const handleFilterChange = (query: string) => {\n    setFilter(query);\n  };\n\n  const handleFilterClear = () => {\n    setFilter('');\n  };\n\n  const onCloseButton = (todo: Todo | null) => {\n    setTodoToShow(todo);\n  };\n\n  const fetchTodos = async () => {\n    try {\n      setIsLoading(true);\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    } catch {\n      // eslint-disable-next-line\n      console.log('Error occurred in App fetch')\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const groupedTodos = useMemo(() => {\n    switch (typeOfTodos) {\n      case TodosType.ACTIVE:\n        return todos.filter(({ completed }) => (!completed));\n      case TodosType.COMPLETED:\n        return todos.filter(({ completed }) => (completed));\n      default:\n        return todos;\n    }\n  }, [todos, typeOfTodos]);\n\n  const filteredTodos = useMemo(() => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return filter === ''\n      ? groupedTodos\n      : groupedTodos.filter(({ title }) => title.toLowerCase().includes(normalizedFilter));\n  }, [groupedTodos, filter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                option={typeOfTodos}\n                filter={filter}\n                onTodoTypeChange={onTodoTypeChange}\n                handleFilterChange={handleFilterChange}\n                handleFilterClear={handleFilterClear}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                isLoading && <Loader />\n              }\n              {\n                !isLoading && (\n                  <TodoList\n                    todos={filteredTodos}\n                    onCloseButton={onCloseButton}\n                    todoToShow={todoToShow}\n                  />\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n      {\n        todoToShow && (\n          <TodoModal todo={todoToShow} onCloseButton={onCloseButton} />\n        )\n      }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}